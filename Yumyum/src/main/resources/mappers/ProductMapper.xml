<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yum.mapper.ProductMapper">
    
    <sql id="productColumns">
          product_num
        , code_id
        , name
        , price
        , info
    </sql>
    
    <sql id="branchProductColumns">
         branch_num
        ,product_num
        ,hiden_yn
    </sql>

    <insert id="insertProduct" parameterType="com.yum.domain.ProductDTO">
        INSERT ALL
            into product (
                <include refid="productColumns" />
            ) VALUES (
                  #{productNum}
                , #{codeId}
                , #{name}
                , #{price}
                , #{info}
            )
            <!-- branchProduct에 insert -->
            into branch_product( 
                <include refid="branchProductColumns"/>
            ) VALUES (
                1
                , #{productNum}
                , 'N'
            )
            into branch_product( 
                <include refid="branchProductColumns"/>
            ) VALUES (
                2
                , #{productNum}
                , 'N'
            )
            into branch_product( 
                <include refid="branchProductColumns"/>
            ) VALUES (
                3
                , #{productNum}
                , 'N'
            )
        SELECT * FROM DUAL
    </insert>
    <select id="selectProductDetail" parameterType="long" resultType="com.yum.domain.ProductDTO">
        
        SELECT 
            <include refid="productColumns" />
        FROM 
            product
        WHERE
            product_num=#{productNum}
    </select>
    
    <update id="updateProduct" parameterType="com.yum.domain.ProductDTO">
        UPDATE product
        SET
<!--              code_id=#{codeId} 
            , --> name=#{name}
            , price=#{price}
            , info=#{info}
        WHERE
            product_num=#{productNum}
    </update>
    
    <delete id="deleteProduct" parameterType="long">
        delete product
        WHERE
            product_num=#{productNum}
    </delete>
    
    <select id="selectProductList" parameterType="com.yum.domain.ProductDTO" resultType="com.yum.domain.ProductDTO">

       SELECT
        <include refid="productColumns" />
        FROM (
            SELECT ROW_NUMBER() OVER (ORDER BY product_num) NUM
            , A.*
            FROM product A
            ORDER BY product_num 
        )
        WHERE NUM BETWEEN #{paginationInfo.firstRecordIndex} AND #{paginationInfo.lastRecordIndex}
    </select>
    
    <select id="selectProductTotalCount" parameterType="com.yum.domain.ProductDTO" resultType="int">
        SELECT 
            COUNT(*)
        FROM 
            product
    </select>
    
    <select id="selectProductMax" parameterType="com.yum.domain.ProductDTO" resultType="int">
        SELECT
            NVL(max(Product_num),0)
        FROM
            product
    </select>
    
</mapper>